# 1 "lexer.mll"
 
    open Parser


exception Eof
exception LexError

let keywords = Hashtbl.create 25
let _ =
  List.iter (function keyword, token -> Hashtbl.add keywords keyword token)
    [
  "var", VAR;
  "integer",  INTEGER;
  "boolean",  BOOLEAN;
  "false",  BOOL false;
  "true",  BOOL true;
  "array",  ARRAY;
  "of",  OF;

  "or", OR;
  "and", AND;
  "not", NOT;

  "if",  IF;
  "then",  THEN;
  "else",  ELSE;

  "while",  WHILE;
  "do",  DO;

  "repeat", REPEAT;
  "until", UNTIL;

  "function",  FUNCTION;
  "procedure",  PROCEDURE;

  "new", NEW;

  "program",  PROGRAM;
  "begin",  BEGIN;
  "end",  END;

  "readln",  READLN;
  "write",  WRITE;
  "writeln",  WRITELN;
]
let id_or_keyword s =
  try Hashtbl.find keywords s with Not_found -> ID s



# 54 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\231\255\232\255\233\255\234\255\235\255\236\255\237\255\
    \238\255\239\255\240\255\241\255\242\255\244\255\245\255\002\000\
    \033\000\003\000\076\000\086\000\019\000\255\255\254\255\020\000\
    \251\255\249\255\250\255\248\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\000\
    \008\000\012\000\003\000\002\000\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\023\000\000\000\000\000\023\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\006\000\009\000\010\000\013\000\011\000\003\000\008\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\017\000\014\000\016\000\012\000\015\000\027\000\
    \024\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\005\000\000\000\004\000\025\000\026\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\020\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \022\000\022\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\019\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\016\000\016\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \020\000\023\000\255\255\255\255\255\255\255\255\255\255\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\255\255\255\255\255\255\255\255\019\000\255\255\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\020\000\023\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 58 "lexer.mll"
                            ( token lexbuf )
# 180 "lexer.ml"

  | 1 ->
# 59 "lexer.mll"
                            ( token lexbuf )
# 185 "lexer.ml"

  | 2 ->
# 60 "lexer.mll"
                     ( id_or_keyword (Lexing.lexeme lexbuf) )
# 190 "lexer.ml"

  | 3 ->
# 61 "lexer.mll"
                     ( INT(int_of_string (Lexing.lexeme lexbuf)) )
# 195 "lexer.ml"

  | 4 ->
# 62 "lexer.mll"
                     ( COLONEQUAL )
# 200 "lexer.ml"

  | 5 ->
# 63 "lexer.mll"
                     ( DIFF )
# 205 "lexer.ml"

  | 6 ->
# 64 "lexer.mll"
                     ( LE )
# 210 "lexer.ml"

  | 7 ->
# 65 "lexer.mll"
                     ( GE )
# 215 "lexer.ml"

  | 8 ->
# 66 "lexer.mll"
                     ( LT )
# 220 "lexer.ml"

  | 9 ->
# 67 "lexer.mll"
                     ( GT )
# 225 "lexer.ml"

  | 10 ->
# 68 "lexer.mll"
                     ( SEMICOLON )
# 230 "lexer.ml"

  | 11 ->
# 69 "lexer.mll"
                     ( COMMA )
# 235 "lexer.ml"

  | 12 ->
# 70 "lexer.mll"
                     ( COLON )
# 240 "lexer.ml"

  | 13 ->
# 71 "lexer.mll"
                     ( EQ )
# 245 "lexer.ml"

  | 14 ->
# 72 "lexer.mll"
                     ( MINUS )
# 250 "lexer.ml"

  | 15 ->
# 73 "lexer.mll"
                     ( PLUS )
# 255 "lexer.ml"

  | 16 ->
# 74 "lexer.mll"
                     ( TIMES )
# 260 "lexer.ml"

  | 17 ->
# 75 "lexer.mll"
                     ( DIV )
# 265 "lexer.ml"

  | 18 ->
# 76 "lexer.mll"
                     ( LPAREN )
# 270 "lexer.ml"

  | 19 ->
# 77 "lexer.mll"
                     ( RPAREN )
# 275 "lexer.ml"

  | 20 ->
# 78 "lexer.mll"
                     ( LBRACKET )
# 280 "lexer.ml"

  | 21 ->
# 79 "lexer.mll"
                     ( RBRACKET )
# 285 "lexer.ml"

  | 22 ->
# 80 "lexer.mll"
                     ( PERIOD )
# 290 "lexer.ml"

  | 23 ->
# 81 "lexer.mll"
                     ( raise Eof )
# 295 "lexer.ml"

  | 24 ->
# 82 "lexer.mll"
                     ( raise LexError )
# 300 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

